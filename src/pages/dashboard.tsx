import { signIn, signOut, useSession } from "next-auth/react";
import { redirect } from "next/navigation";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";

import { api } from "~/utils/api";
import { toast } from "react-hot-toast";

export function AddTaskForm() {
  const { data:sessionData, status } = useSession();
  const [desc, setDesc] = useState("");
  const [date, setDate] = useState("");
  const ctx = api.useContext();

  const { mutate } = api.task.create.useMutation({
    onSuccess: () => {
      setDesc("");
      setDate("");
      void ctx.task.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;
      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0]);
      } else {
        toast.error("Failed to post! Please try again later.");
      }
    },
});

  if (status !== "authenticated") return null;

  return (
    <div className="sm:flex">
        <input onChange={(e) => setDesc(e.target.value)} type="text" value={desc} className="py-3 px-4 pe-11 block w-full border-t border-neutral-200 -mt-px -ms-px last:rounded-b-lg sm:mt-0 sm:first:ms-0 sm:first:rounded-se-none sm:last:rounded-es-none text-sm relative focus:z-10 focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:focus:ring-neutral-600" />
        <input onChange={(e) => setDate(e.target.value)} type="datetime-local" value={date} className="py-3 px-4 pe-11 block w-full border-t border-l border-neutral-200 -mt-px -ms-px last:rounded-b-lg sm:mt-0 sm:first:ms-0 sm:first:rounded-se-none sm:last:rounded-es-none text-sm relative focus:z-10 focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:focus:ring-neutral-600" />
        <button disabled={desc === "" || date === ""} onClick={() => mutate({ desc: desc, dueDate: new Date(date) })} className="py-3 px-4 text-sm sm:w-1/4 w-full font-semibold border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-neutral-600">
          Add
        </button>
    </div>
  )
}

export default function Dashboard() {
  const { data:sessionData, status } = useSession();
  const { data: tasks } = api.task.getAll.useQuery();

  if (status !== "authenticated") {
    return (
      <>
        <Head>
          <title>Dashboard</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="min-h-screen text-neutral-800 dark:bg-neutral-900 dark:text-neutral-300">
          <div className="max-w-screen-md mx-auto">
            Please sign in to use the dashboard
          </div>
        </main>
      </>
    );
  }

  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="test.css" key="test"/>
      </Head>
      <main className="min-h-screen text-neutral-800 dark:bg-neutral-900 dark:text-neutral-300">
        <div className="w-11/12 max-w-screen-md mx-auto py-2">
            <div className="flex flex-col bg-white border border-neutral-200 shadow-sm rounded-xl p-4 md:p-5 dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutrals-300">
                <h2>Timer</h2>
            </div>

            <div className="flex flex-col py-2">
                <div className="-m-1.5 overflow-x-auto">
                    <div className="p-1.5 min-w-full inline-block align-middle">
                    <div className="border rounded-lg overflow-hidden dark:border-neutral-700">
                        <table className="min-w-full divide-y divide-neutral-200 dark:divide-neutral-700">
                        <thead>
                            <tr>
                            <th scope="col" className="px-6 py-3 text-start text-xs font-medium text-neutral-500 uppercase">Task</th>
                            <th scope="col" className="px-6 py-3 text-end text-xs font-medium text-neutral-500 uppercase">Due Date</th>
                            <th scope="col" className="px-6 py-3 text-end text-xs font-medium text-neutral-500 uppercase">Finish Task</th>
                            </tr>
                        </thead>
                        <tbody className="divide-y divide-neutral-200 dark:divide-neutral-700">
                            {tasks?.map((task) => (
                              [
                                <tr>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-neutral-800 dark:text-neutral-200">{task.desc}</td>
                                  <td className="px-6 py-4 whitespace-nowrap text-end text-sm text-neutral-800 dark:text-neutral-200">{task.dueDate.toString()}</td>
                                  <td className="px-6 py-4 whitespace-nowrap text-end text-sm font-medium">
                                    <button type="button" className="inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent text-blue-600 hover:text-blue-800 disabled:opacity-50 disabled:pointer-events-none dark:text-blue-500 dark:hover:text-blue-400 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-neutral-600">Finish</button>
                                  </td>
                                </tr>
                              ]
                            ))}
                        </tbody>
                        </table>
                        <AddTaskForm />
                    </div>
                    </div>
                </div>
            </div>
        </div>
      </main>
    </>
  );
}